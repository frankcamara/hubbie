{"version":3,"sources":["AppDrawer/AppDrawer.js","Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","AppDrawer","children","classes","val","useTheme","React","useState","open","setOpen","handleMenuItem","v","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Drawer","variant","anchor","paper","direction","Divider","List","ListItem","button","key","ListItemIcon","ListItemText","primary","textAlign","palette","text","secondary","Blog","Grid","container","item","xs","Paper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68500530.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport AmpStoriesIcon from '@material-ui/icons/AmpStories';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport AnnouncementIcon from '@material-ui/icons/Announcement';\nimport CategoryIcon from '@material-ui/icons/Category';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nexport default function AppDrawer({children, val = 'start'}) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleMenuItem = v => {\n    val = v;\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          \n          <IconButton color=\"secondary\" onClick={() => handleMenuItem('home')}>\n            Hubbie\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key={'Competence'} onClick={() => handleMenuItem('competence')}>\n            <ListItemIcon><CategoryIcon /></ListItemIcon>\n            <ListItemText primary={'Competence'} />\n          </ListItem>\n          <ListItem button key={'Blog'} onClick={() => handleMenuItem('blog')}>\n            <ListItemIcon><AmpStoriesIcon /></ListItemIcon>\n            <ListItemText primary={'Blog'} />\n          </ListItem>\n          <ListItem button key={'News'} onClick={() => handleMenuItem('news')}>\n            <ListItemIcon><AnnouncementIcon /></ListItemIcon>\n            <ListItemText primary={'News'} />\n          </ListItem>\n          <ListItem button key={'About'} onClick={() => handleMenuItem('about')}>\n            <ListItemIcon><AlternateEmailIcon /></ListItemIcon>\n            <ListItemText primary={'About'} />\n          </ListItem>\n        </List>\n        <Divider />\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <div>{children}</div>\n      </main>\n    </div>\n  );\n}\n\nAppDrawer.propTypes = {\n  val: PropTypes.string\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function Blog() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>Highlight post</Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>Post 2</Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>Post 3</Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>Post 4</Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>Post 5</Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>Post 6</Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>Post 7</Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppDrawer from './AppDrawer/AppDrawer';\nimport Blog from './Blog/Blog';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: 'center'\n  }\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppDrawer>\n        <Blog />\n      </AppDrawer>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}